@using ScrumApp.Utilities
@using System.Web;

@model ScrumApp.Models.Board

@{
    ViewData["Title"] = "Board";
}

<head>

    <meta charset="utf-8" />
    <meta http-equiv="X-UA-Compatible" content="IE=edge" />
    <meta name="google" value="notranslate" />
    <title>Side Menu</title>

    <link rel="stylesheet" type="text/css" href="https://netdna.bootstrapcdn.com/font-awesome/4.0.3/css/font-awesome.css">
    <link rel="stylesheet" href="~/css/chat.css" />


    <link href="https://stackpath.bootstrapcdn.com/font-awesome/4.7.0/css/font-awesome.min.css" rel="stylesheet" integrity="sha384-wvfXpqpZZVQGK6TAh5PVlGOfQNHSoD2xbE+QkPxCAFlNEevoEH3Sl0sibVcOQVnN" crossorigin="anonymous">

    <link href="https://unpkg.com/material-components-web@v4.0.0/dist/material-components-web.min.css" rel="stylesheet">
    <script src="https://unpkg.com/material-components-web@v4.0.0/dist/material-components-web.min.js"></script>
    <link rel="stylesheet" href="https://fonts.googleapis.com/icon?family=Material+Icons">

</head>



@section outOfContainer{
    <nav class="navbar navbar-expand-sm navbar-toggleable-sm navbar-light bg-white border-bottom box-shadow mb-3 second-nav">
        <div class="container-fluid">
            <button class="navbar-toggler" type="button" data-toggle="collapse" data-target=".navbar-collapse" aria-controls="navbarSupportedContent"
                    aria-expanded="false" aria-label="Toggle navigation">
                <span class="navbar-toggler-icon"></span>
            </button>
            <div class="navbar-collapse collapse d-sm-inline-flex flex-sm-row-reverse">

                <ul class="navbar-nav ml-auto" style="margin:0;padding:0;">

                    <li class="nav-item pull-right" style="margin:0;padding:0;">
                        <a id="invite-users-btn" class="text-dark" asp-route-userSlug="@Model.Project.Author.UserName" asp-route-projectSlug="@Model.Project.Slug" asp-controller="invitations">
                            <span style="margin-right:.5rem;font-weight: 600;">Invite user</span> <span style="font-size:19px!important;" class="material-icons text-dark">person_add</span>
                        </a>
                    </li>
                </ul>

                <ul class="navbar-nav flex-grow-1">


                    @foreach (var board in ViewBag.boards)
                    {

                        <li class="nav-item @Html.IsBoardActive("Board", "Board", (string)board.BoardSlug)">
                            <a class="nav-link text-dark" asp-route-userSlug="@board.Project.Author.UserName" asp-route-projectSlug="@board.Project.Slug" asp-route-boardSlug="@board.BoardSlug">@board.BoardName</a>
                        </li>
                    }
                    <li class="nav-item">
                        <a id="create-board" asp-action="Create"><span class="fas fa-plus"></span>   Add Board</a>
                    </li>

                </ul>

            </div>
        </div>
    </nav>
}

<div class="popup hide">
    <div class="popup-container">
        <form asp-controller="Invitations" asp-action="InviteMany" method="post">
            @Html.AntiForgeryToken()


            <div class="pull-right" id="add-email"><span class="fas fa-plus"></span> Add another </div>
            <a id="submit-email-invitation" style="cursor:pointer">Invite</a>

        </form>
    </div>
</div>

@using Microsoft.AspNetCore.Identity
@using ScrumApp.Models
@inject UserManager<AppUser> userManager
@{
    var user = await userManager.FindByNameAsync(User.Identity.Name);

}

<div id="board-content">
    <partial name="GetData" model='@Model'>
</div>




<div id="live-chat">
    <header id="clearfix">
        <h4>@Model.Project.ProjectName</h4>
    </header>

    <div class="hide" id="chatbox-content">
        <div id="btn_container">
            <a id="load_more">Load more...</a>
        </div>
        <ul style="margin-bottom:0;margin-top:0;padding-top:0;padding-bottom:0;padding-left:0;padding-right:0;" id="messagesList">
        </ul>

        <form method="post" class="chat-controls">
            <textarea id="messageInput" class="chat-controls__textarea" rows="2" placeholder="Type your message"></textarea>
            <div class="btns-row">
                <a href="#" class="chat-controls__btn" id="sendButton">Send</a>
            </div>
        </form>

    </div>
</div>





@section Scripts{












    <script src="~/js/signalr/dist/browser/signalr.js"></script>
    <script src="~/js/chat.js"></script>

    <script>


        @inject UserManager<AppUser> userManager
        @{
            var user = await userManager.FindByNameAsync(User.Identity.Name);
        }


        $(".story-list").sortable({
            connectWith: ".story-list",
            placeholder: "ui-state-highlight",
            forcePlaceholderSize: true,
            revert: true});

        $(".story-list").disableSelection();

        $("#sortable").sortable({
            handle: '.card-header',
            placeholder: "ui-state-highlight",
            forcePlaceholderSize: true,
            revert: true
        });

        $("#sortable").disableSelection();



        var oldest_message_id = 0;
        var connection = new signalR.HubConnectionBuilder().withUrl("/chathub").build();
        var boardConnection = new signalR.HubConnectionBuilder().withUrl("/boardhub").build();

        document.getElementById("sendButton").disabled = true;

        connection.on("ReceiveMessage", function (message, user, userId, userImg, time) {

            var usr = user.replace(/&/g, "&amp;").replace(/</g, "&lt;").replace(/>/g, "&gt;");
            var msg = message.replace(/&/g, "&amp;").replace(/</g, "&lt;").replace(/>/g, "&gt;");
            var encodedMsg = msg;

            var li = createMessageDOM('@user.Id', user, userId, userImg, encodedMsg, time);
            document.getElementById("messagesList").appendChild(li);

            console.log(time);

        });

        boardConnection.on("ReceiveMessage", function () {

            var url = '/@Model.Project.Author.UserNameSlug/@Model.Project.Slug/@Model.BoardSlug/Board/GetData';
            console.log(url);

            setTimeout(function () {
               $.ajax({
                    url: url,
                    type: "get",
                    success: function (result) {
                        $("#board-content").html(result);

                       //Reatach sortable to the new dom-elements in the new partial view
                       $(".story-list").sortable({
                            connectWith: ".story-list",
                            placeholder: "ui-state-highlight",
                            forcePlaceholderSize: true,
                            revert: true});

                       $(".story-list").disableSelection();

                        $("#sortable").sortable({
                            handle: '.card-header',
                            placeholder: "ui-state-highlight",
                            forcePlaceholderSize: true,
                            revert: true
                        });

                        $("#sortable").disableSelection();
                    }
                });
            }, 200);  

        });


        boardConnection.start().then(function () {

            var projectId = '@Model.Project.ProjectId';
            var group = 'group_' + projectId;


            boardConnection.invoke("JoinGroup", group).catch(function (err) {
                return console.error(err.toString());
            });

        }).catch(function (err) {
            return console.error(err.toString());
        });




        connection.start().then(function () {

            document.getElementById("sendButton").disabled = false;

            var projectId = '@Model.Project.ProjectId';
            var group = 'group_' + projectId;


            connection.invoke("JoinGroup", group).catch(function (err) {
                return console.error(err.toString());
            });

            $.ajax({
                type: "GET",
                url: "@Url.Action("GetNextChatMessages", "ChatMessage")",
                success: function (result) {

                    result.forEach(function (entry) {

                        var dom = createMessageDOM('@user.Id', entry.AuthorName, entry.AuthorId, entry.userImage, entry.messageText);
                        document.getElementById("messagesList").prepend(dom);

                    });

                    if (result.length > 0) {

                        oldest_message_id = result[result.length - 1].messageId;

                        if (result.length < 5) {
                            document.getElementById("load_more").classList.add("hide");
                        }
                    }



                },
                error: function (response) {
                    alert(response);
                }
            });


        }).catch(function (err) {
            return console.error(err.toString());
        });




        document.getElementById("sendButton").addEventListener("click", function (event) {

            var message = document.getElementById("messageInput").value;

            var projectId = '@Model.Project.ProjectId';
            var userName = "@user.FirstName @user.LastName";
            var userId = "@user.Id";
            var userImg = "@user.ProfilePicture";
            var group = 'group_' + projectId;


            if (message.length > 0) {
                connection.invoke("SendMessageToGroup", group, message, userName, userId, userImg).catch(function (err) {
                    return console.error(err.toString());
                });


                $.ajax({
                    type: "POST",
                    url: "@Url.Action("Create", "ChatMessage")",
                    data: {
                        "MessageText": message,
                        "ProjectId": projectId,
                        "AuthorId": userId
                        },

                });
            }


            document.getElementById("messageInput").value = "";

            event.preventDefault();
        });






        window.onbeforeunload = function () {

            var projectId = '@Model.Project.ProjectId';
            var group = 'group_' + projectId;

            connection.invoke("LeaveGroup", group).catch(function (err) {
                return console.error(err.toString());
            });
            boardConnection.invoke("LeaveGroup", group).catch(function (err) {
                return console.error(err.toString());
            });
        };







        document.getElementById("clearfix").addEventListener("click", function (event) {

            if (document.getElementById("chatbox-content").classList.contains("hide")) {
                document.getElementById("chatbox-content").classList.remove("hide");
            }
            else {
                document.getElementById("chatbox-content").classList.add("hide");
            }
        })






        $("#submit-email-invitation").on('click', function (event) {

            var projectName = '@Model.Project.Slug';
            var projectAuthor = '@Model.Project.Author.UserNameSlug';
            var url = "/" + projectAuthor + "/" + projectName + "/Invitations/InviteMany"

            var token = $("[name='__RequestVerificationToken']").val();

            var headers = {};
            headers['Accept'] = "application/json";
            headers['__RequestVerificationToken'] = token;
            headers['RequestVerificationToken'] = token;

            let es = $('.email-field').map(function () {
                return $(this).val();
            }).get()


            jQuery.ajaxSettings.traditional = true

            $.ajax({
                type: "POST",
                url: url,
                headers: headers,
                data: { emails: es },

            });

            $(".popup").addClass("hide");
            $(".email-field").remove();
        });


        $("#add-email").on('click', function () {
            $('<input type="text" placeholder="Email Adress..." class="sb-textfield email-field" />').insertBefore("#add-email");
        })

        $("#invite-users-btn").on('click', function (event) {
            event.preventDefault();

            if ($(".popup").hasClass("hide")) {

                $('<input type="text" placeholder="Email Adress..." class="sb-textfield email-field" />').insertBefore("#add-email");
                $(".popup").removeClass("hide");
            }
            else {

                $(".popup").addClass("hide");
                $(".email-field").remove();
            }
        });

        $(".sortable-story").hover(function () {
            $(this.firstElementChild.firstElementChild).fadeToggle(200);
            $(this).find(".wowowow").fadeToggle(200);
          });

        $(document).on('sortstop', ".story-list", function (event, ui) {

            columnId = $(ui.item[0].parentElement).attr('id');
                storyId = $(ui.item[0]).attr('id').slice(6);

                var ids = $('#' + columnId).find('.sortable-story').map(function () {
                    return this.id.slice(6);
                }).get();

                let jsonString = JSON.stringify(ids);

                let url = "/Story/reorder/" + columnId.slice(2);

                jQuery.ajaxSettings.traditional = true

                $.post(url, { vals: ids }, function () { });


                var projectId = '@Model.Project.ProjectId';
                var group = 'group_' + projectId;

                
                boardConnection.invoke("SendMessageToGroup", group).catch(function (err) {
                    return console.error(err.toString());
                });
                
            
        });


        $(document).on('sortstop', "#sortable", function (event, ui) {


            let ids = $('.this-is-cool').map(function(){
                return this.id;
            }).get()

            let jsonString = JSON.stringify(ids);

            var x = $("#sortable").serializeArray();

            let url = "/BoardColumn/reorder/"+@Model.BoardId;
            jQuery.ajaxSettings.traditional = true

            $.post(url, { vals: ids }, function () { });

            var projectId = '@Model.Project.ProjectId';
            var group = 'group_' + projectId;
                        
            boardConnection.invoke("SendMessageToGroup", group).catch(function (err) {
                return console.error(err.toString());
            });
            
            
        });


        $(document).on('click', '.card-body .open', function (evt) {
            load_id = evt.target.id;
            id = load_id.slice(5)
            view_id = "view_" + id;

            if ($("#" + view_id).hasClass("hide")) {
                $("#" + view_id).removeClass("hide")
                $("#" + load_id).addClass("hide")
            }
            else {
                $("#" + view_id).addClass("hide")
                $("#" + load_id).removeClass("hide")

            }

        });

        $('.form-group a').click(function (evt) {
            close_form_id = evt.target.id;
            id = close_form_id.slice(11);


            view_id = "view_" + id;
            load_id = "load_" + id;

            $("#" + view_id).addClass("hide");
            $("#" + load_id).removeClass("hide");

        });


         document.addEventListener('click',function(e){
            if(e.target && e.target.id == 'load_more'){

                console.log(oldest_message_id);

                $.ajax({
                    type: "GET",
                    url: "@Url.Action("GetNextChatMessages", "ChatMessage")",
                    data: { lastMessageId: oldest_message_id },
                    success: function (result) {

                        result.forEach(function (entry) {

                            var dom = createMessageDOM('@user.Id', entry.AuthorName, entry.AuthorId, entry.userImage, entry.messageText);
                            document.getElementById("messagesList").prepend(dom);

                        });

                        oldest_message_id = result[result.length - 1].messageId;

                        if (result.length < 5) {
                            document.getElementById("load_more").classList.add("hide");
                        }

                    },
                    error: function (response) {
                        alert(response);
                    }
                });

             }
         });

    </script>
}