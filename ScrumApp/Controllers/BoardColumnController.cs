using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using Microsoft.AspNetCore.Identity;
using Microsoft.AspNetCore.Mvc;
using ScrumApp.Data;
using ScrumApp.Models;

namespace ScrumApp.Controllers
{
    public class BoardColumnController : Controller
    {
        private readonly ScrumApplicationContext context;
        private readonly UserManager<AppUser> userManager;
        public BoardColumnController(ScrumApplicationContext context, UserManager<AppUser> userManager)
        {
            this.context = context;
            this.userManager = userManager;
        }
        /*
         when create-forms are generated by js we can get model by id instead of slugs
             */
        public IActionResult Index()
        {
            return View();
        }

        public IActionResult Create()
        {
            return View();
        }

        [HttpPost]
        public async Task<IActionResult> Create(BoardColumn boardColumn, string userSlug, string projectSlug, string boardSlug)
        {
            System.Diagnostics.Debug.WriteLine(userSlug + projectSlug + boardSlug + boardColumn.BoardColumnName);
            if (ModelState.IsValid)
            {
                AppUser user = await userManager.GetUserAsync(HttpContext.User);

                AppUser projectOwner = context.Users
                    .Where(x => x.UserName.ToLower().Replace(" ", "-") == userSlug)
                    .FirstOrDefault();

                //check if the projects exists
                var project = context.Projects
                    .Where(x => x.ProjectName.ToLower().Replace(" ", "-") == projectSlug)
                    .Where(x => x.Author == projectOwner)
                    .FirstOrDefault();

                if (project == null)
                    return NotFound();

                //check if logged in user is a member of the project
                //GIVES ERROR
                var result = context.UserProjects
                    .Where(x => x.AppUser == user)
                    .Where(x => x.ProjectId == project.ProjectId)
                    .FirstOrDefault();

                if (result == null)
                    return NotFound();

                var boards = context.Boards
                   .Where(x => x.Project == project);


                Board currentBoard = boards
                    .Where(x => x.BoardSlug == boardSlug)
                    .FirstOrDefault();


                string slug = boardColumn.BoardColumnName.ToLower().Replace(" ", "-");

                IEnumerable<BoardColumn> SlugExist = context.BoardColumns
                    .Where(x => x.BoardColumnSlug == slug);

                if (SlugExist == null)
                {
                    System.Diagnostics.Debug.WriteLine("A board with the title allready exists");
                    return View();
                }


                boardColumn.BoardColumnSlug = slug;
                boardColumn.Board = currentBoard;
                boardColumn.BoardColumnSorting = 100;

                await context.BoardColumns.AddAsync(boardColumn);
                context.SaveChanges();

            }

            return RedirectToAction("Board", "Board");
        }

        [HttpPost]
        public async Task<IActionResult> reorder(int id, int[] vals)
        {
            int boardId = id;
            int[] columnsId = vals;

            int newSorting = 1;

            foreach (var valid in columnsId)
            {
                var column = await context.BoardColumns.FindAsync(valid);
                column.BoardColumnSorting = newSorting;

                context.BoardColumns.Update(column);
                await context.SaveChangesAsync();

                newSorting += 1;
            }
            return Ok();
        }
    }
}